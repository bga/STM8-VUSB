void usb_rx(u8* rawData) {
	u8* rx_buf_ptr = rx_buf;
	u8 prevBit = 1;
	u8 rep = 6;
	u8 yl;

	rx_length = 0;
	
s:
	u8 i = 0;


	for (int i = 0; i < 8; i++) {
		u8 a = IDR() ^ prevBit;
		if (a == 0) { //Same
			BSET(*rx_buf_ptr, i);

			rep--;

			if (rep == 0) {
				rep = 6;
				prevBit = IDR();
			}
		}
		else {//Diff
			BCLR(*rx_buf_ptr, i);

			prevBit = !prevBit;

			rep = 6;
			
		}
	}
	_asm {
		ld a, prev
		xor a, IDR
		sll a
		rlc(_buf, x)
		jrnc QAQ		//Jump if C==0, data == 1


		QAQ:
			
	}

	rx_buf_ptr++;
	rx_length++;
	if (*rawData == 'Z')
		return;
	else
		goto s;

}
























	xref	_usb_tx_count, _usb_tx_buffer_pointer, _Init_TIM1, _Init_GPIO

	xdef	_usb_tx, _USB_SendACK, _USB_SendNACK
	
switch .bss
PID_BUF: ds.w 1
ODR_BUF: ds.b 1

switch .text
PID_ACK:	dc.w	$80D2
PID_NACK:	dc.w	$805A
PID_STALL:dc.w	$801E
MASK_00:	dc.b	$6F
MASK_11:	dc.b	$90

DP:	equ 7
DN: equ 4
;GPIOC
ODR: equ $500A
IDR: equ $500B
DDR: equ $500C
CR1: equ $500D
CR2: equ $500E

CCER1:equ $525C
CCMR2:equ $5259
BRK:	equ $526D
OISR: equ $526F

	xref	_usb_tx_count, _usb_tx_buffer_pointer

	xdef	_usb_tx

L_Bit0_Idle:
	nop
	nop
	dec		a
	jrne	L_Bit1_Begin
	nop
	nop
	nop
	bcpl CCMR2, #4
	nop
	nop
	ld		a, #$06
	jra		L_Bit1_Begin
	nop
	nop

L_Bit1_Idle:
	nop
	nop
	dec		a
	jrne	L_Bit2_Begin
	nop
	nop
	nop
	bcpl CCMR2, #4
	nop
	nop
	ld		a, #$06
	jra		L_Bit2_Begin
	nop
	nop

L_Bit2_Idle:
	nop
	dec		a
	jrne	L_Bit3_Begin
	nop
	nop
	nop
	nop
	bcpl CCMR2, #4
	nop
	ld		a, #$06
	jra		L_Bit3_Begin
	nop
	nop

L_Bit3_Idle:
	nop
	nop
	nop
	dec		a
	jrne	L_Bit4_Begin
	nop;
	nop
	nop
	bcpl CCMR2, #4
	nop
	nop
	ld		a, #$06
	jra		L_Bit4_Begin
	nop
	nop
	;nop


L_Bit0_Begin:
	rrc		(x)						// 忌我找 0 -> 妊C.C
	jrc		L_Bit0_Idle				// 扭快把快抄找我, 快扼抖我 把忘志快扶 C妊.C = 1
	bcpl CCMR2, #4
	ld		a, #$06					// 快扼抖我 忌抑抖忘 我扶志快把扼我攸, 扼忌把忘扼抑志忘快技
	nop
	nop
	nop
	nop

L_Bit1_Begin:
	rrc		(x)						// 忌我找 0 -> 妊C.C
	jrc		L_Bit1_Idle				// 扭快把快抄找我, 快扼抖我 把忘志快扶 C妊.C = 1
	bcpl CCMR2, #4
	ld		a, #$06
	nop
	nop
	nop
	nop

L_Bit2_Begin:
	rrc		(x)						// 忌我找 0 -> 妊C.C
	jrc		L_Bit2_Idle				// 扭快把快抄找我, 快扼抖我 把忘志快扶 C妊.C = 1
	bcpl CCMR2, #4
	ld		a, #$06
	nop
	nop
	nop
	;nop

L_Bit3_Begin:
	rrc		(x)						// 忌我找 0 -> 妊C.C
	jrc		L_Bit3_Idle				// 扭快把快抄找我, 快扼抖我 把忘志快扶 C妊.C = 1
	nop;
	bcpl CCMR2, #4
	ld		a, #$06
	nop
	nop
	nop
	nop

L_Bit4_Begin:
	rrc		(x)						// 忌我找 0 -> 妊C.C
	jrc		L_Bit4_Idle				// 扭快把快抄找我, 快扼抖我 把忘志快扶 C妊.C = 1
	bcpl CCMR2, #4
	ld		a, #$06
	nop
	nop
	nop
	nop

L_Bit5_Begin:
	rrc		(x)						// 忌我找 0 -> 妊C.C
	jrc		L_Bit5_Idle				// 扭快把快抄找我, 快扼抖我 把忘志快扶 C妊.C = 1
	bcpl CCMR2, #4
	ld		a, #$06
	nop
	nop
	nop
	nop

L_Bit6_Begin:
	rrc		(x)						// 忌我找 0 -> 妊C.C
	jrc		L_Bit6_Idle				// 扭快把快抄找我, 快扼抖我 把忘志快扶 C妊.C = 1
	bcpl CCMR2, #4
	ld		a, #$06
	nop
	nop

L_Bit7_Begin:
	rrc		(x)						// 忌我找 0 -> 妊C.C
	jrc		L_Bit7_Idle				// 扭快把快抄找我, 快扼抖我 把忘志快扶 C妊.C = 1
	nop
	nop
	bcpl CCMR2, #4
	ld		a, #$06

L_Check_End:

	incw	x
	dec		_usb_tx_count
	jrne	L_Bit0_Begin

	nop
L_Tx_End:
	nop
	nop
	nop
	bres BRK, #7	;Enter Idle
	
	jra L_Post_Tx



;
;
;

L_Bit4_Idle:
	nop
	nop
	dec		a
	jrne	L_Bit5_Begin
	nop
	nop
	nop
	bcpl CCMR2, #4
	nop
	nop
	ld		a, #$06
	jra		L_Bit5_Begin
	nop

	nop
L_Bit5_Idle:
	nop
	nop
	dec		a
	jrne	L_Bit6_Begin
	nop
	nop
	nop
	bcpl CCMR2, #4
	nop
	nop
	ld		a, #$06
	jra		L_Bit6_Begin
	nop
	nop

L_Bit6_Idle:

	dec		a
	jrne	L_Bit7_Begin
	nop
	nop
	nop
	nop
	nop
	bcpl CCMR2, #4
	ld		a, #$06
	jra		L_Bit7_Begin
	nop
	nop
	nop

L_Bit7_Idle:
	dec		a
	jrne	L_Check_End
	dec		_usb_tx_count
	nop
	incw	x
	nop
	ld		a, #$06
	nop
	bcpl CCMR2, #4
	nop
	tnz		_usb_tx_count
	jrne	L_Bit0_Begin
	jra		L_Tx_End

;
;	妥抉折抗忘 志抒抉忱忘
;
_usb_tx:
	;Exit capture mode, clear CC2E
	bres CCER1,#4
	
	bset OISR, #3	; D- CH2N = 1 at idle
	bres OISR, #2	; D+ CH2 = 0 at idle
	
	;Configure as output
	ld a, #$FC
	and a, CCMR2
	ld CCMR2, a

	mov CCMR2, #$40 ; Force D- CH2 low, D+ CH2N high when output enabled
	mov CCER1, #$50 ; CH2, CH2N enabled, active high
	
	bset BRK, #7		; Enable diff
	
	
	ldw	x, _usb_tx_buffer_pointer
	ld		a, #$06	
	
	bres OISR, #3	; D- CH2N = 0 at idle	
	
	jra		L_Bit0_Begin


L_Post_Tx:
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop

	bset OISR, #3	; D- CH2N = 1 at idle
	bres OISR, #2	; D+ CH2 = 0 at idle

	nop
	nop
	nop
	nop
	nop
	
	;Disable Output mode	
	bres CCER1, #4
	bres CCER1, #6


	ret


_USB_SendACK:
	ldw x, PID_ACK
	ldw PID_BUF, x
	ldw x, #PID_BUF
	ldw _usb_tx_buffer_pointer, x
	mov _usb_tx_count, #2
	jra _usb_tx
	
_USB_SendNACK:
	ldw x, PID_NACK
	ldw PID_BUF, x
	ldw x, #PID_BUF
	ldw _usb_tx_buffer_pointer, x
	mov _usb_tx_count, #2
	jra _usb_tx	